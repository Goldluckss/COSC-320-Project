searchState.loadedDescShard("c4_rust", 0, "C4 Compiler in Rust\nError types for the compiler\nIO errors (file operations)\nLexer errors (tokenization)\nParser errors (syntax)\nType errors (semantics)\nVM runtime errors\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe lexer state for tokenizing source code\nRepresents the current token with its metadata\nGet the current token\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the current line number\nName for identifier or string tokens\nCreate a new lexer from source code string\nGet the next token from the source code\nType of the token\nValue for numeric tokens\nParser for C4 compiler\nReturns the argument unchanged.\nGet the generated code\nGet the data segment\nGet the main function address\nGet a reference to the symbol table\nInitialize parser\nCalls <code>U::from(self)</code>.\nCreate a new parser\nParse the source code\nSymbol representation\nSymbol table for managing variables and functions\nAdd a symbol to the current scope\nSymbol class (Fun, Glo, Loc, Num, etc.)\nGet current scope level\nEnter a new scope\nCheck if a symbol exists in any accessible scope\nCheck if a symbol exists in the current scope\nExit the current scope\nReturns the argument unchanged.\nReturns the argument unchanged.\nFind a symbol by name, searching from current scope up to â€¦\nGet symbol by index\nFind the main function\nGet the number of scopes\nGet all symbols\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of the symbol\nCreate a new symbol table\nSymbol type (INT, CHAR, PTR)\nValue or address\nVM operation codes\nToken types for the lexer and parser\nType system\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this is a pointer type\nGet the precedence level of an operator token\nGet the size of this type\nCreate a pointer to this type\nConvert opcode to string representation for debugging\nVirtual Machine for executing compiled C4 code\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new virtual machine\nRun the VM starting at the specified entry point")