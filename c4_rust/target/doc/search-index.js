var searchIndex = new Map(JSON.parse('[["c4_rust",{"t":"EEEEECCCCCCGPPPFPPNNNNNNNONNNNNNNNNNONNNNNNNNNNNNNNNNOOOOOOOOOOOOOOFFNNNNNNNNNNNNNNNNONNNONNNNNNOFNNNNNNNNNNNNNFFNNNNNONNNNNNNNNNNNNNNNNOOONNNNNNONNNNNNNNNONNOPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPPGGPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNN","n":["Opcode","Parser","SymbolTable","TokenType","Type","error","lexer","parser","symbol","types","vm","CompilerError","IOError","LexerError","ParserError","SourceLocation","TypeError","VMError","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","column","eq","fmt","","","from","","","into","","lexer_error","line","new","parser_error","simple_lexer_error","simple_parser_error","simple_type_error","to_owned","to_string","","try_from","","try_into","","type_error","type_id","","vm_error","cycle","instruction","location","","","message","","","","source_line","","","suggestion","","Lexer","Token","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","column","current_token","fmt","from","","get_current_line","into","","line","name","new","next_token","to_owned","token_type","try_from","","try_into","","type_id","","value","Parser","borrow","borrow_mut","from","get_code","get_data","get_main_function","init","into","new","parse","try_from","try_into","type_id","Symbol","SymbolTable","add","borrow","","borrow_mut","","class","clone","clone_into","clone_to_uninit","current_scope_level","current_symbol","current_symbol_mut","enter_scope","exists","exit_scope","fmt","from","","get","get_by_index","get_by_index_mut","get_main","get_mut","h_class","h_type","h_value","into","","is_empty","iter","iter_mut","len","name","new","","restore_state","save_state","to_owned","try_from","","try_into","","typ","type_id","","value","ADD","ADJ","AND","Add","And","Assign","BNZ","BZ","Brak","CHAR","CLOS","Char","Colon","Comma","Cond","DIV","Dec","Div","ENT","EQ","EXIT","Else","Enum","Eof","Eq","FREE","Fun","GE","GT","Ge","Glo","Gt","IMM","INT","Id","If","Inc","Int","JMP","JSR","LBrace","LC","LE","LEA","LEV","LI","LParen","LT","Lan","Le","Loc","Lor","Lt","MALC","MCMP","MOD","MSET","MUL","Mod","Mul","NE","NEG","Ne","Num","OPEN","OR","Opcode","Or","PRTF","PSH","PTR","RBrace","RBracket","READ","RParen","Return","SC","SHL","SHR","SI","SUB","Semicolon","Shl","Shr","Sizeof","Sub","Sys","Tilde","TokenType","Type","Void","While","XOR","Xor","borrow","","","borrow_mut","","","clone","","","clone_into","","","clone_to_uninit","","","eq","","","fmt","","","from","","","into","","","is_ptr","partial_cmp","precedence","size","to_owned","","","to_ptr","to_string","try_from","","","try_into","","","type_id","","","VirtualMachine","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id"],"q":[[0,"c4_rust"],[11,"c4_rust::error"],[53,"c4_rust::error::CompilerError"],[67,"c4_rust::lexer"],[97,"c4_rust::parser"],[111,"c4_rust::symbol"],[159,"c4_rust::types"],[298,"c4_rust::vm"],[308,"core::fmt"],[309,"std::io::error"],[310,"core::option"],[311,"alloc::string"],[312,"core::result"],[313,"core::any"],[314,"core::iter::traits::iterator"],[315,"core::cmp"],[316,"alloc::vec"]],"i":"````````````Ab00`00f1010000001101101100111100101011011D`0DbDdDf210321010``BfBd10000110101101011001010100`Bh000000000000``Bn0Bl1000001111110101111100010111101000010100100Ch00C`00110Cb21111211222111121221112011112212222212111112222211221122`122011211222221111111``1121120120120120120120120120120011012002120120120`Cn00000000","f":"``````````````````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{f}}}f}{{b{b{dc}}}h{}}{{bj}h}`{{{b{f}}{b{f}}}l}{{{b{f}}{b{dn}}}A`}{{{b{Ab}}{b{dn}}}A`}0{cc{}}0{AdAb}{{}c{}}0{{{b{Af}}AhAh{Aj{{b{Af}}}}}Ab}`{{AhAh}f}{{{b{Af}}AhAh{Aj{{b{Af}}}}{Aj{{b{Af}}}}}Ab}{{{b{Af}}}Ab}00{bc{}}{{{b{f}}}Al}{bAl}{c{{An{e}}}{}{}}0{{}{{An{c}}}{}}06{bB`}0{{{b{Af}}{Aj{{b{Af}}}}{Aj{Bb}}}Ab}````````````````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{Bd}}}Bd}{{b{b{dc}}}h{}}{{bj}h}{{{b{Bf}}}Ah}{{{b{Bf}}}{{b{Bd}}}}{{{b{Bd}}{b{dn}}}A`}{cc{}}0{{{b{Bf}}}Al}{{}c{}}05`{{All}Bf}{{{b{dBf}}}{{An{BdAb}}}}{bc{}}`{c{{An{e}}}{}{}}0{{}{{An{c}}}{}}0{bB`}0``{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}:{{{b{Bh}}}{{b{{Bj{Bb}}}}}}{{{b{Bh}}}{{b{{Bj{j}}}}}}{{{b{Bh}}}{{Aj{{b{Bl}}}}}}{{{b{dBh}}}{{An{hAb}}}}<{{All}Bh}1987``{{{b{dBn}}{b{Af}}C`CbBb}Ah}7766`{{{b{Bl}}}Bl}{{b{b{dc}}}h{}}{{bj}h}{{{b{Bn}}}Ah}{{{b{Bn}}}{{Aj{{b{Bl}}}}}}{{{b{dBn}}}{{Aj{{b{dBl}}}}}}{{{b{dBn}}}h}{{{b{Bn}}{b{Af}}}l}1{{{b{Bl}}{b{dn}}}A`}{cc{}}0{{{b{Bn}}{b{Af}}}{{Aj{{b{Bl}}}}}}{{{b{Bn}}Ah}{{Aj{{b{Bl}}}}}}{{{b{dBn}}Ah}{{Aj{{b{dBl}}}}}}8{{{b{dBn}}{b{Af}}}{{Aj{{b{dBl}}}}}}```{{}c{}}0{{{b{Bn}}}l}{{{b{Bn}}}{{`{{Cf{}{{Cd{{b{Bl}}}}}}}}}}{{{b{dBn}}}{{`{{Cf{}{{Cd{{b{dBl}}}}}}}}}}>`{{}Bn}{{{b{Af}}C`CbBb}Bl}{{{b{dBl}}}h}0{bc{}}{c{{An{e}}}{}{}}0{{}{{An{c}}}{}}0`{bB`}0```````````````````````````````````````````````````````````````````````````````````````````````{b{{b{c}}}{}}00{{{b{d}}}{{b{dc}}}{}}00{{{b{C`}}}C`}{{{b{Ch}}}Ch}{{{b{Cb}}}Cb}{{b{b{dc}}}h{}}00{{bj}h}00{{{b{C`}}{b{C`}}}l}{{{b{Ch}}{b{Ch}}}l}{{{b{Cb}}{b{Cb}}}l}{{{b{C`}}{b{dn}}}A`}{{{b{Ch}}{b{dn}}}A`}{{{b{Cb}}{b{dn}}}A`}{cc{}}00{{}c{}}00{Cbl}{{{b{C`}}{b{C`}}}{{Aj{Cj}}}}{{{b{C`}}}Ah}{CbAh}{bc{}}00{CbCb}{{{b{Ch}}}{{b{Af}}}}{c{{An{e}}}{}{}}00{{}{{An{c}}}{}}00{bB`}00`{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}=<{{{Cl{Bb}}{Cl{j}}Ahl}Cn}{{{b{dCn}}Ah{b{{Bj{Al}}}}}{{An{BbAb}}}}654","D":"L`","p":[[1,"reference",null,null,1],[0,"mut"],[5,"SourceLocation",11],[1,"unit"],[1,"u8"],[1,"bool"],[5,"Formatter",308],[8,"Result",308],[6,"CompilerError",11],[5,"Error",309],[1,"str"],[1,"usize"],[6,"Option",310,null,1],[5,"String",311],[6,"Result",312,null,1],[5,"TypeId",313],[1,"i64"],[5,"Token",67],[5,"Lexer",67],[5,"Parser",97],[1,"slice"],[5,"Symbol",111],[5,"SymbolTable",111],[6,"TokenType",159],[6,"Type",159],[17,"Item"],[10,"Iterator",314],[6,"Opcode",159],[6,"Ordering",315],[5,"Vec",316],[5,"VirtualMachine",298],[15,"VMError",53],[15,"LexerError",53],[15,"ParserError",53],[15,"TypeError",53]],"r":[[0,159],[1,97],[2,111],[3,159],[4,159]],"b":[[28,"impl-Debug-for-CompilerError"],[29,"impl-Display-for-CompilerError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAANQAHQAAAAUABwAEABMABgAbAAMAIQAAACsAAAAtAAQAMwABADYADQBGAAYATwAAAFkAAABbAAUAYwABAG0AAgBzAAMAeAACAIEAAACJAAIAlwAEAJ0AAQCgAEEA4wAUAPoAGAAaAQAAHQECACIBCAAsAQEAMgECAA==","P":[[18,"T"],[22,""],[23,"T"],[24,""],[30,"T"],[32,""],[33,"U"],[35,""],[42,"T"],[43,""],[45,"U,T"],[47,"U"],[49,""],[69,"T"],[73,""],[74,"T"],[75,""],[79,"T"],[81,""],[82,"U"],[84,""],[88,"T"],[90,"U,T"],[92,"U"],[94,""],[98,"T"],[101,""],[105,"U"],[106,""],[108,"U,T"],[109,"U"],[110,""],[114,"T"],[119,""],[120,"T"],[121,""],[129,"T"],[131,""],[139,"U"],[141,""],[150,"T"],[151,"U,T"],[153,"U"],[156,""],[253,"T"],[259,""],[262,"T"],[265,""],[274,"T"],[277,"U"],[280,""],[284,"T"],[287,""],[289,"U,T"],[292,"U"],[295,""],[299,"T"],[302,"U"],[303,""],[305,"U,T"],[306,"U"],[307,""]]}],["c4_rust",{"t":"EEEEECCCCCCGPPPPPNNNNNNNNNNNFFNNNNNNNNNNNNNNONNNONNNNNNOFNNNNNNNNNNNNNNFFNNNNNONNNNNNNNNNNNNNNNNNONNNNNNONNOPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPPGGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNN","n":["Opcode","Parser","SymbolTable","TokenType","Type","error","lexer","parser","symbol","types","vm","CompilerError","IOError","LexerError","ParserError","TypeError","VMError","borrow","borrow_mut","fmt","","from","","into","to_string","try_from","try_into","type_id","Lexer","Token","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","current_token","fmt","from","","into","","line","name","new","next_token","to_owned","token_type","try_from","","try_into","","type_id","","value","Parser","borrow","borrow_mut","from","get_code","get_data","get_main_function","get_symbol_table","init","into","new","parse","try_from","try_into","type_id","Symbol","SymbolTable","add","borrow","","borrow_mut","","class","clone","clone_into","clone_to_uninit","current_scope_level","enter_scope","exists","exists_in_current_scope","exit_scope","fmt","from","","get","get_by_index","get_main","get_scope_count","get_symbols","into","","name","new","to_owned","try_from","","try_into","","typ","type_id","","value","ADD","ADJ","AND","Add","And","Assign","BNZ","BZ","BitNot","Brak","CHAR","CLOS","Char","Colon","Comma","Cond","DIV","Dec","Div","ENT","EQ","EXIT","Else","Enum","Eof","Eq","FREE","Fun","GE","GT","Ge","Glo","Gt","IMM","INT","Id","If","Inc","Int","JMP","JSR","LBrace","LC","LE","LEA","LEV","LI","LParen","LT","Lan","Le","Loc","Lor","Lt","MALC","MCMP","MOD","MSET","MUL","Mod","Mul","NE","Ne","Not","Num","OPEN","OR","Opcode","Or","PRTF","PSH","PTR","RBrace","RBracket","READ","RParen","Return","SC","SHL","SHR","SI","SUB","Semicolon","Shl","Shr","Sizeof","Str","Sub","Sys","TokenType","Type","While","XOR","Xor","borrow","","","borrow_mut","","","clone","","","clone_into","","","clone_to_uninit","","","eq","","","fmt","","","from","","","into","","","is_ptr","partial_cmp","precedence","size","to_owned","","","to_ptr","to_string","try_from","","","try_into","","","type_id","","","VirtualMachine","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id"],"q":[[0,"c4_rust"],[11,"c4_rust::error"],[28,"c4_rust::lexer"],[56,"c4_rust::parser"],[71,"c4_rust::symbol"],[108,"c4_rust::types"],[247,"c4_rust::vm"],[257,"core::fmt"],[258,"std::io::error"],[259,"alloc::string"],[260,"core::result"],[261,"core::any"],[262,"core::option"],[263,"core::cmp"],[264,"alloc::vec"]],"i":"````````````f000000000000000``AjAd100001010101011001010100`B`0000000000000``Bh0C`10000011111010111111001010100100Cb00Bl001100Bn21111211222111121221112011112212222212111112222211211122`122011211222221111111``121120120120120120120120120120011012002120120120`Ch00000000","f":"`````````````````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{f}}{b{dh}}}j}0{lf}{cc{}}{{}c{}}{bn}{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{bAb}``9988{{{b{Ad}}}Ad}{{b{b{dc}}}Af{}}{{bAh}Af}{{{b{Aj}}}{{b{Ad}}}}{{{b{Ad}}{b{dh}}}j}::99{{{b{Aj}}}Al}`{{nAn}Aj}{{{b{dAj}}}{{A`{Adf}}}}{bc{}}`;;::99``{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{cc{}}{{{b{B`}}}{{b{{Bd{Bb}}}}}}{{{b{B`}}}{{b{{Bd{Ah}}}}}}{{{b{B`}}}{{Bf{Al}}}}{{{b{B`}}}{{b{Bh}}}}{{{b{dB`}}}{{A`{Aff}}}}{{}c{}}{{nAn}B`}2{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{bAb}``{{{b{dBh}}{b{Bj}}BlBnBb}Al}==<<`{{{b{C`}}}C`}{{b{b{dc}}}Af{}}{{bAh}Af}{{{b{Bh}}}Al}{{{b{dBh}}}Af}{{{b{Bh}}{b{Bj}}}An}01{{{b{C`}}{b{dh}}}j}{cc{}}0{{{b{Bh}}{b{Bj}}}{{Bf{C`}}}}{{{b{Bh}}Al}{{Bf{{b{C`}}}}}}{{{b{Bh}}}{{Bf{C`}}}}7{{{b{Bh}}}{{b{{Bd{C`}}}}}}{{}c{}}0`{{}Bh}{bc{}}{c{{A`{e}}}{}{}}0{{}{{A`{c}}}{}}0`{bAb}0```````````````````````````````````````````````````````````````````````````````````````````````{b{{b{c}}}{}}00{{{b{d}}}{{b{dc}}}{}}00{{{b{Bl}}}Bl}{{{b{Cb}}}Cb}{{{b{Bn}}}Bn}{{b{b{dc}}}Af{}}00{{bAh}Af}00{{{b{Bl}}{b{Bl}}}An}{{{b{Cb}}{b{Cb}}}An}{{{b{Bn}}{b{Bn}}}An}{{{b{Bl}}{b{dh}}}j}{{{b{Cb}}{b{dh}}}j}{{{b{Bn}}{b{dh}}}j}{cc{}}00{{}c{}}00{BnAn}{{{b{Bl}}{b{Bl}}}{{Bf{Cd}}}}{{{b{Bl}}}Al}{BnAl}{bc{}}00{BnBn}{{{b{Cb}}}{{b{Bj}}}}{c{{A`{e}}}{}{}}00{{}{{A`{c}}}{}}00{bAb}00`{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}=<{{{Cf{Bb}}{Cf{Ah}}AlAn}Ch}{{{b{dCh}}Al{b{{Bd{n}}}}}{{A`{Bbf}}}}654","D":"Ib","p":[[1,"reference",null,null,1],[0,"mut"],[6,"CompilerError",11],[5,"Formatter",257],[8,"Result",257],[5,"Error",258],[5,"String",259],[6,"Result",260,null,1],[5,"TypeId",261],[5,"Token",28],[1,"unit"],[1,"u8"],[5,"Lexer",28],[1,"usize"],[1,"bool"],[5,"Parser",56],[1,"i64"],[1,"slice"],[6,"Option",262,null,1],[5,"SymbolTable",71],[1,"str"],[6,"TokenType",108],[6,"Type",108],[5,"Symbol",71],[6,"Opcode",108],[6,"Ordering",263],[5,"Vec",264],[5,"VirtualMachine",247]],"r":[[0,108],[1,56],[2,71],[3,108],[4,108]],"b":[[19,"impl-Display-for-CompilerError"],[20,"impl-Debug-for-CompilerError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAALgAFwAAAAUABwAEABIABAAZAAMAHwAGACcAAAAwAAAAMgAFADoAAQBFAAIASwADAFAAAgBYAAAAZAAEAGoAAQBtAEIAsQAUAMgAFwDnAAAA6gACAO8ACAD5AAEA/wACAA==","P":[[17,"T"],[19,""],[22,"T"],[23,"U"],[24,""],[25,"U,T"],[26,"U"],[27,""],[30,"T"],[34,""],[35,"T"],[36,""],[39,"T"],[41,"U"],[43,""],[47,"T"],[49,"U,T"],[51,"U"],[53,""],[57,"T"],[60,""],[65,"U"],[66,""],[68,"U,T"],[69,"U"],[70,""],[74,"T"],[79,""],[80,"T"],[81,""],[88,"T"],[90,""],[95,"U"],[98,""],[99,"T"],[100,"U,T"],[102,"U"],[105,""],[202,"T"],[208,""],[211,"T"],[214,""],[223,"T"],[226,"U"],[229,""],[233,"T"],[236,""],[238,"U,T"],[241,"U"],[244,""],[248,"T"],[251,"U"],[252,""],[254,"U,T"],[255,"U"],[256,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[6856,5519]}