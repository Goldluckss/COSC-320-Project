var searchIndex = new Map(JSON.parse('[["c4_rust",{"t":"EEEEECCCCCCGPPPPPNNNNNNNNNNNFFNNNNNNNNNNNNNNONNNONNNNNNOFNNNNNNNNNNNNNNFFNNNNNONNNNNNNNNNNNNNNNNNONNNNNNONNOPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPPGGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNN","n":["Opcode","Parser","SymbolTable","TokenType","Type","error","lexer","parser","symbol","types","vm","CompilerError","IOError","LexerError","ParserError","TypeError","VMError","borrow","borrow_mut","fmt","","from","","into","to_string","try_from","try_into","type_id","Lexer","Token","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","current_token","fmt","from","","into","","line","name","new","next_token","to_owned","token_type","try_from","","try_into","","type_id","","value","Parser","borrow","borrow_mut","from","get_code","get_data","get_main_function","get_symbol_table","init","into","new","parse","try_from","try_into","type_id","Symbol","SymbolTable","add","borrow","","borrow_mut","","class","clone","clone_into","clone_to_uninit","current_scope_level","enter_scope","exists","exists_in_current_scope","exit_scope","fmt","from","","get","get_by_index","get_main","get_scope_count","get_symbols","into","","name","new","to_owned","try_from","","try_into","","typ","type_id","","value","ADD","ADJ","AND","Add","And","Assign","BNZ","BZ","BitNot","Brak","CHAR","CLOS","Char","Colon","Comma","Cond","DIV","Dec","Div","ENT","EQ","EXIT","Else","Enum","Eof","Eq","FREE","Fun","GE","GT","Ge","Glo","Gt","IMM","INT","Id","If","Inc","Int","JMP","JSR","LBrace","LC","LE","LEA","LEV","LI","LParen","LT","Lan","Le","Loc","Lor","Lt","MALC","MCMP","MOD","MSET","MUL","Mod","Mul","NE","Ne","Not","Num","OPEN","OR","Opcode","Or","PRTF","PSH","PTR","RBrace","RBracket","READ","RParen","Return","SC","SHL","SHR","SI","SUB","Semicolon","Shl","Shr","Sizeof","Str","Sub","Sys","TokenType","Type","While","XOR","Xor","borrow","","","borrow_mut","","","clone","","","clone_into","","","clone_to_uninit","","","eq","","","fmt","","","from","","","into","","","is_ptr","partial_cmp","precedence","size","to_owned","","","to_ptr","to_string","try_from","","","try_into","","","type_id","","","VirtualMachine","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id"],"q":[[0,"c4_rust"],[11,"c4_rust::error"],[28,"c4_rust::lexer"],[56,"c4_rust::parser"],[71,"c4_rust::symbol"],[108,"c4_rust::types"],[247,"c4_rust::vm"],[257,"core::fmt"],[258,"std::io::error"],[259,"alloc::string"],[260,"core::result"],[261,"core::any"],[262,"core::option"],[263,"core::cmp"],[264,"alloc::vec"]],"i":"````````````f000000000000000``AjAd100001010101011001010100`B`0000000000000``Bh0C`10000011111010111111001010100100Cb00Bl001100Bn21111211222111121221112011112212222212111112222211211122`122011211222221111111``121120120120120120120120120120011012002120120120`Ch00000000","f":"`````````````````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{f}}{b{dh}}}j}0{lf}{cc{}}{{}c{}}{bn}{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{bAb}``9988{{{b{Ad}}}Ad}{{b{b{dc}}}Af{}}{{bAh}Af}{{{b{Aj}}}{{b{Ad}}}}{{{b{Ad}}{b{dh}}}j}::99{{{b{Aj}}}Al}`{{nAn}Aj}{{{b{dAj}}}{{A`{Adf}}}}{bc{}}`;;::99``{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{cc{}}{{{b{B`}}}{{b{{Bd{Bb}}}}}}{{{b{B`}}}{{b{{Bd{Ah}}}}}}{{{b{B`}}}{{Bf{Al}}}}{{{b{B`}}}{{b{Bh}}}}{{{b{dB`}}}{{A`{Aff}}}}{{}c{}}{{nAn}B`}2{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{bAb}``{{{b{dBh}}{b{Bj}}BlBnBb}Al}==<<`{{{b{C`}}}C`}{{b{b{dc}}}Af{}}{{bAh}Af}{{{b{Bh}}}Al}{{{b{dBh}}}Af}{{{b{Bh}}{b{Bj}}}An}01{{{b{C`}}{b{dh}}}j}{cc{}}0{{{b{Bh}}{b{Bj}}}{{Bf{C`}}}}{{{b{Bh}}Al}{{Bf{{b{C`}}}}}}{{{b{Bh}}}{{Bf{C`}}}}7{{{b{Bh}}}{{b{{Bd{C`}}}}}}{{}c{}}0`{{}Bh}{bc{}}{c{{A`{e}}}{}{}}0{{}{{A`{c}}}{}}0`{bAb}0```````````````````````````````````````````````````````````````````````````````````````````````{b{{b{c}}}{}}00{{{b{d}}}{{b{dc}}}{}}00{{{b{Bl}}}Bl}{{{b{Cb}}}Cb}{{{b{Bn}}}Bn}{{b{b{dc}}}Af{}}00{{bAh}Af}00{{{b{Bl}}{b{Bl}}}An}{{{b{Cb}}{b{Cb}}}An}{{{b{Bn}}{b{Bn}}}An}{{{b{Bl}}{b{dh}}}j}{{{b{Cb}}{b{dh}}}j}{{{b{Bn}}{b{dh}}}j}{cc{}}00{{}c{}}00{BnAn}{{{b{Bl}}{b{Bl}}}{{Bf{Cd}}}}{{{b{Bl}}}Al}{BnAl}{bc{}}00{BnBn}{{{b{Cb}}}{{b{Bj}}}}{c{{A`{e}}}{}{}}00{{}{{A`{c}}}{}}00{bAb}00`{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}=<{{{Cf{Bb}}{Cf{Ah}}AlAn}Ch}{{{b{dCh}}Al{b{{Bd{n}}}}}{{A`{Bbf}}}}654","D":"Ib","p":[[1,"reference",null,null,1],[0,"mut"],[6,"CompilerError",11],[5,"Formatter",257],[8,"Result",257],[5,"Error",258],[5,"String",259],[6,"Result",260,null,1],[5,"TypeId",261],[5,"Token",28],[1,"unit"],[1,"u8"],[5,"Lexer",28],[1,"usize"],[1,"bool"],[5,"Parser",56],[1,"i64"],[1,"slice"],[6,"Option",262,null,1],[5,"SymbolTable",71],[1,"str"],[6,"TokenType",108],[6,"Type",108],[5,"Symbol",71],[6,"Opcode",108],[6,"Ordering",263],[5,"Vec",264],[5,"VirtualMachine",247]],"r":[[0,108],[1,56],[2,71],[3,108],[4,108]],"b":[[19,"impl-Display-for-CompilerError"],[20,"impl-Debug-for-CompilerError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAALgAFwAAAAUABwAEABIABAAZAAMAHwAGACcAAAAwAAAAMgAFADoAAQBFAAIASwADAFAAAgBYAAAAZAAEAGoAAQBtAEIAsQAUAMgAFwDnAAAA6gACAO8ACAD5AAEA/wACAA==","P":[[17,"T"],[19,""],[22,"T"],[23,"U"],[24,""],[25,"U,T"],[26,"U"],[27,""],[30,"T"],[34,""],[35,"T"],[36,""],[39,"T"],[41,"U"],[43,""],[47,"T"],[49,"U,T"],[51,"U"],[53,""],[57,"T"],[60,""],[65,"U"],[66,""],[68,"U,T"],[69,"U"],[70,""],[74,"T"],[79,""],[80,"T"],[81,""],[88,"T"],[90,""],[95,"U"],[98,""],[99,"T"],[100,"U,T"],[102,"U"],[105,""],[202,"T"],[208,""],[211,"T"],[214,""],[223,"T"],[226,"U"],[229,""],[233,"T"],[236,""],[238,"U,T"],[241,"U"],[244,""],[248,"T"],[251,"U"],[252,""],[254,"U,T"],[255,"U"],[256,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[5518]}